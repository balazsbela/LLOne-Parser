PROGRAM DECLIST IDENT OFFSET FACTOR AUX7 AUX6 AUX5 STMNT AUX3 AUX2 AUX1 SYMBOL DECLARATION SIMPLETYPE TYPE ARRAY_DECLARATION COMPOUND_STATEMENT STATEMENT_LIST STATEMENT SIMPLE_STATEMENT ASSIGNMENT OPERATOR1 OPERATOR2 EXPRESSION TERM IO_STATEMENT READ_STATEMENT WRITE_STATEMENT STRUCTURED_STATEMENT IF_STATEMENT WHILE_STATEMENT CONDITION RELATION
identifier constant more when work isnot is bigger smaller samebigger samesmaller be message ask hi bye numb char + - * / ( ) ; and or not [ ] < > stable boolean otherwise
PROGRAM
PROGRAM ->  DECLIST  AUX1
AUX1 -> STATEMENT_LIST | E	
DECLIST -> DECLARATION ; AUX2
AUX2 -> DECLIST | E
SYMBOL -> identifier | constant 
DECLARATION -> TYPE identifier AUX3
AUX3 -> be EXPRESSION | E
SIMPLETYPE -> numb | char 
TYPE -> SIMPLETYPE | ARRAY_DECLARATION
ARRAY_DECLARATION -> more < SIMPLETYPE > [ constant ]				
COMPOUND_STATEMENT -> hi STATEMENT_LIST bye
STATEMENT_LIST -> STATEMENT STMNT
STMNT -> STATEMENT_LIST | E 
STATEMENT -> SIMPLE_STATEMENT | STRUCTURED_STATEMENT
SIMPLE_STATEMENT -> ASSIGNMENT ; | IO_STATEMENT ;
ASSIGNMENT -> IDENT be EXPRESSION 
IDENT -> identifier OFFSET
OFFSET -> [ SYMBOL ] | E
OPERATOR1 -> + | -
OPERATOR2 -> * | /
EXPRESSION -> TERM AUX5
AUX5 -> OPERATOR1 EXPRESSION | E
TERM -> FACTOR AUX6
AUX6 -> OPERATOR2 TERM | E
FACTOR -> ( EXPRESSION ) | SYMBOL
IO_STATEMENT -> READ_STATEMENT | WRITE_STATEMENT
READ_STATEMENT -> ask identifier
WRITE_STATEMENT -> message EXPRESSION
STRUCTURED_STATEMENT -> COMPOUND_STATEMENT | IF_STATEMENT | WHILE_STATEMENT
IF_STATEMENT -> when CONDITION COMPOUND_STATEMENT AUX7
AUX7 -> otherwise COMPOUND_STATEMENT | E
WHILE_STATEMENT -> work CONDITION STATEMENT
CONDITION -> ( EXPRESSION RELATION EXPRESSION )
RELATION -> bigger | smaller | samebigger | samesmaller | is | isnot